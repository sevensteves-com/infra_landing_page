---
- name: Deploy Landing Page
  hosts: "{{ target_host }}"
  become: true
  vars_files:
    - ../vars/landing_config.yml
  tasks:
    - name: Ensure deployment directory exists
      file:
        path: "{{ deploy_dir }}"
        state: directory
        mode: '0755'

    - name: Template docker-compose file
      template:
        src: ../templates/docker-compose.yml.j2
        dest: "{{ deploy_dir }}/docker-compose.yml"

    - name: Pull latest image from registry
      command: docker pull {{ container_image }}

    - name: Start container with Docker Compose
      command:
        cmd: docker compose up -d
        chdir: "{{ deploy_dir }}"
      register: compose_result

    - name: Wait for container to initialize (10 seconds)
      pause:
        seconds: 10
      when: compose_result is success

    - name: Check container status
      command:
        cmd: docker compose ps
        chdir: "{{ deploy_dir }}"
      register: container_status
      when: compose_result is success

    - name: Display container status
      debug:
        var: container_status.stdout_lines
      when: container_status is defined

    - name: Verify container is running
      command:
        cmd: docker compose ps --format json
        chdir: "{{ deploy_dir }}"
      register: container_json_status
      when: compose_result is success

    - name: Fail if container is not running
      fail:
        msg: "Container failed to start properly. Please check the logs."
      when: >
        container_json_status is defined and
        (container_json_status.stdout_lines | map('from_json') | selectattr('State', 'equalto', 'running') | list | length == 0)

    - name: Smoke test root page
      uri:
        url: "https://{{ landing_domain }}/"
        status_code: 200
        return_content: yes
      register: health_check
      retries: 10
      delay: 3
      until: health_check.status == 200

    - name: Get container logs
      command:
        cmd: docker compose logs --tail=50
        chdir: "{{ deploy_dir }}"
      register: container_logs
      when: compose_result is success

    - name: Display container logs
      debug:
        var: container_logs.stdout_lines
      when: container_logs is defined

    - name: Output summary
      debug:
        msg: "Landing Page is live at https://{{ landing_domain }}"
